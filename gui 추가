import tkinter as tk
from tkinter import messagebox, ttk
import pandas as pd

# MBTI 유형별 산업경영공학 관련 추천 직업
career_recommendations_ime = {
    "INTJ": ["데이터 분석가", "생산 계획 전문가", "프로세스 엔지니어"],
    "ENTP": ["공정 혁신 컨설턴트", "스타트업 창업자", "IT 기획자"],
    "ISFJ": ["품질 관리 전문가", "생산 운영 관리자", "고객 지원 전문가"],
    "ESTP": ["물류 관리 전문가", "구매 및 자재 관리 전문가", "공장 설비 관리자"],
    "INFJ": ["공정 개선 기획자", "환경 및 지속 가능성 전문가", "연구 개발 전문가"],
    "ENFP": ["HR 데이터 분석가", "교육 프로그램 개발자", "혁신 관리자"],
    "ISTJ": ["공급망 관리자", "프로젝트 매니저", "시스템 엔지니어"],
    "ESTJ": ["운영 관리자", "생산 관리자", "품질 보증 전문가"],
    "INFP": ["사용자 경험(UX) 디자이너", "CSR 전문가", "기술 커뮤니케이터"],
    "ENTJ": ["전략 기획자", "비즈니스 분석가", "프로젝트 디렉터"],
    "ISFP": ["프로세스 설계자", "데이터 시각화 전문가", "기술 지원 엔지니어"],
    "ESFP": ["이벤트 및 운영 기획자", "현장 관리 감독자", "영업 엔지니어"],
    "ISTP": ["자동화 엔지니어", "설비 유지보수 전문가", "기술 컨설턴트"],
    "ESFJ": ["서비스 운영 관리자", "고객 경험(CX) 관리자", "공정 관리 전문가"],
    "INTP": ["알고리즘 엔지니어", "최적화 모델링 전문가", "인공지능(AI) 연구원"],
    "ENFJ": ["조직 컨설턴트", "HR 혁신 전문가", "협업 시스템 기획자"],
}

# 데이터 로드 (여기서는 파일 경로가 필요함, 예시로 파일이 있다고 가정)
main_file_path = "취업.csv"
file_paths = {
    "IT 및 기술 개발 기업": "IT 및 기술 개발 기업.csv",
    "경영 지원 및 컨설팅 기업": "경영 지원 및 컨설팅 기업.csv",
    "데이터분석 기업": "데이터분석 기업.csv",
    "마케팅 및 기획 기업": "마케팅 및 기획 기업.csv",
    "물류 및 SCM기업": "물류 및 SCM기업.csv",
    "서비스 및 영업 기업": "서비스 및 영업 기업.csv",
    "제조 및 생산 기업": "제조 및 생산 기업.csv",
}

# 데이터 통합
all_data = []
for name, path in file_paths.items():
    try:
        df = pd.read_csv(path, encoding='euc-kr')
        df['분야'] = name  # 각 데이터에 분야 추가
        all_data.append(df)
    except Exception as e:
        print(f"Error loading {name}: {e}")

# 통합 데이터프레임 생성
sector_job_data = pd.concat(all_data, ignore_index=True)

# 메인 CSV 파일 데이터 로드
main_job_data = pd.read_csv(main_file_path, encoding='euc-kr')

# 디버깅을 위한 출력
print("Main Job Data '분야' column:", main_job_data['분야'].unique())  # '분야' 열 확인

# '분야' 열에서 NaN 값을 제외하고 유니크한 값만 추출하여 Combobox에 표시
valid_fields = main_job_data['분야'].dropna().unique()


# 직업 추천 함수
def career_test_ime(mbti_result):
    careers = career_recommendations_ime.get(mbti_result, ["추천 직업이 없습니다."])
    return careers


# 분야별 취업 정보 보기
def show_field_info():
    field_info_window = tk.Toplevel(root)
    field_info_window.title("분야별 취업 정보")

    selected_field = field_combobox.get()
    selected_data = main_job_data[main_job_data['분야'] == selected_field].iloc[0]

    label = tk.Label(field_info_window,
                     text=f"**분야**: {selected_data['분야']}\n**주요 직무**: {selected_data['주요 직무']}\n**취업 가능 기업**: {selected_data['취업 가능 기업']}\n**필요 역량/기술**: {selected_data['필요 역량/기술']}\n**추천 자격증**: {selected_data['추천 자격증']}",
                     justify='left')
    label.pack(padx=10, pady=10)


# 기업별 취업 공고 보기
def show_company_info():
    company_info_window = tk.Toplevel(root)
    company_info_window.title("기업별 취업 공고")

    selected_field = field_combobox.get()
    selected_data = sector_job_data[sector_job_data['분야'] == selected_field]

    companies = selected_data['기업명'].unique()
    company_combobox = ttk.Combobox(company_info_window, values=companies)
    company_combobox.pack(padx=10, pady=10)

    def show_selected_company_info():
        selected_company = company_combobox.get()
        company_data = selected_data[selected_data['기업명'] == selected_company]

        company_info_label = ""
        for idx, row in company_data.iterrows():
            company_info_label += (f"\n**채용 직무/분야**: {row['채용 직무/분야']}\n"
                                   f"**주요 업무**: {row['주요 업무']}\n"
                                   f"**지원 자격 및 우대사항**: {row['지원 자격 및 우대사항']}\n"
                                   f"**근무 조건**: {row['근무 조건']}\n"
                                   f"**모집 기간**: {row['모집 기간']}\n"
                                   f"**지원 방법**: {row['지원 방법']}\n"
                                   f"**기타 사항**: {row['기타 사항']}\n"
                                   "-----------------------------")
        company_info_label_window = tk.Label(company_info_window, text=company_info_label, justify='left')
        company_info_label_window.pack(padx=10, pady=10)

    show_button = tk.Button(company_info_window, text="기업 정보 보기", command=show_selected_company_info)
    show_button.pack(padx=10, pady=10)


# MBTI 직업 추천
def mbti_job_recommendation():
    mbti_result = mbti_entry.get().strip().upper()
    careers = career_test_ime(mbti_result)
    careers_text = "\n".join(careers)
    result_label.config(text=f"{mbti_result} 유형의 추천 직업은:\n{careers_text}")


# 메인 GUI 설정
root = tk.Tk()
root.title("산업경영공학과 졸업생을 위한 취업 도우미 프로그램")

# MBTI 입력
mbti_label = tk.Label(root, text="MBTI 유형을 입력하세요 (예: INTJ, ENFP 등):")
mbti_label.pack(pady=10)

mbti_entry = tk.Entry(root)
mbti_entry.pack(pady=10)

mbti_button = tk.Button(root, text="직업 추천", command=mbti_job_recommendation)
mbti_button.pack(pady=10)

result_label = tk.Label(root, text="추천 직업이 여기에 표시됩니다.", justify="left")
result_label.pack(pady=10)

# 분야 선택
field_label = tk.Label(root, text="분야를 선택하세요:")
field_label.pack(pady=10)

field_combobox = ttk.Combobox(root, values=valid_fields)  # 유효한 분야만 표시
field_combobox.pack(pady=10)

field_info_button = tk.Button(root, text="분야별 정보 보기", command=show_field_info)
field_info_button.pack(pady=5)

company_info_button = tk.Button(root, text="기업별 정보 보기", command=show_company_info)
company_info_button.pack(pady=5)

root.mainloop()
