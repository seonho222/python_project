from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.label import Label
from kivy.uix.spinner import Spinner
from kivy.uix.boxlayout import BoxLayout
from kivy.config import Config

# 기본 글꼴 설정 (NanumGothic.ttf 경로가 맞는지 확인하세요)
Config.set('kivy', 'default_font', [
    'Arial',
    'data/fonts/NanumGothic.ttf',  # 글꼴 경로가 정확한지 확인
    'data/fonts/DejaVuSans.ttf',
])

class CareerApp(App):
    def build(self):
        try:
            # 레이아웃 생성
            self.root = BoxLayout(orientation='vertical', padding=10, spacing=10)

            # MBTI 입력 라벨
            self.mbtientry_label = Label(text="MBTI 유형을 입력하세요 (예: INTJ, ENFP 등):", font_name="NanumGothic")
            self.root.add_widget(self.mbtientry_label)

            # MBTI 입력 필드
            self.mbtientry = TextInput(hint_text="MBTI 입력", multiline=False, font_name="NanumGothic")
            self.root.add_widget(self.mbtientry)

            # 직업 추천 버튼
            self.mbti_button = Button(text="직업 추천", font_name="NanumGothic")
            self.mbti_button.bind(on_press=self.show_mbti_careers)
            self.root.add_widget(self.mbti_button)

            # 결과 라벨
            self.result_label = Label(text="추천 직업이 여기에 표시됩니다.", size_hint_y=None, height=40, font_name="NanumGothic")
            self.root.add_widget(self.result_label)

            # 분야 선택 라벨
            self.field_label = Label(text="분야를 선택하세요:", font_name="NanumGothic")
            self.root.add_widget(self.field_label)

            # 분야 선택 스피너
            self.field_spinner = Spinner(text='분야 선택', values=['IT', '마케팅', '디자인'], size_hint=(None, None), height=44, width=200, font_name="NanumGothic")
            self.root.add_widget(self.field_spinner)

            # 분야 정보 보기 버튼
            self.field_info_button = Button(text="분야별 정보 보기", font_name="NanumGothic")
            self.field_info_button.bind(on_press=self.show_field_info)
            self.root.add_widget(self.field_info_button)

            return self.root
        except Exception as e:
            print(f"Error in build method: {e}")
            # 오류가 발생할 경우 빈 레이아웃을 반환하여 앱이 종료되지 않도록 함
            return BoxLayout()

    def show_mbti_careers(self, instance):
        try:
            # MBTI 유형에 맞는 직업 추천 로직을 여기에 추가
            mbti = self.mbtientry.text.upper()  # 대소문자 구분하지 않도록 입력값을 대문자로 변환
            if mbti == "INTJ":
                self.result_label.text = "추천 직업: 데이터 과학자"
            elif mbti == "ENFP":
                self.result_label.text = "추천 직업: 마케팅 전문가"
            else:
                self.result_label.text = "추천 직업을 찾을 수 없습니다."
        except Exception as e:
            print(f"Error in show_mbti_careers method: {e}")
            self.result_label.text = "직업 추천을 처리하는 중 오류가 발생했습니다."

    def show_field_info(self, instance):
        try:
            field = self.field_spinner.text
            if field == 'IT':
                self.result_label.text = "IT 분야는 기술 개발, 시스템 관리 등을 포함합니다."
            elif field == '마케팅':
                self.result_label.text = "마케팅 분야는 광고, 브랜딩 등을 포함합니다."
            elif field == '디자인':
                self.result_label.text = "디자인 분야는 그래픽 디자인, UI/UX 디자인 등을 포함합니다."
            else:
                self.result_label.text = "선택된 분야가 없습니다."
        except Exception as e:
            print(f"Error in show_field_info method: {e}")
            self.result_label.text = "분야 정보 조회 중 오류가 발생했습니다."

if __name__ == '__main__':
    CareerApp().run()
